CGMINER_CONF="/etc/cgminer.conf"
BOSMINER_CONF="/etc/bosminer.toml"

BOSMINER_CONF_DST="/tmp/bosminer.toml"
CONFIG_GENERATOR="sysupgrade_script"

sort_list() {
	echo "$1" | \
	sed -e 's/,\+$//' -e 's/\(,\+\)/\n/g' | sed 's/^0\+\(\d\+\)/\1/' | \
	sort -n${2} 2> /dev/null
}

get_min() {
	sort_list "$1" | head -n1
}

get_max() {
	sort_list "$1" "r" | head -n1
}

begins_with() {
	case "$2" in
		"$1"*) true;;
		*) false;;
	esac
}

has_substr() {
	case "$2" in
		*"$1"*) true;;
		*) false;;
	esac
}

migrate_cgminer_conf() {
	# Do not migrate CGMiner config when BOSminer config is already generated
	[ -f "$BOSMINER_CONF_DST" -o ! -f "$CGMINER_CONF" ] && return 0

	echo "Migrating obsolete CGMiner configuration..."

	. /usr/share/libubox/jshn.sh

	cat > "$BOSMINER_CONF_DST" <<-END
		[format]
		version = '1.0${UPGRADE_FW_VERSION_PLUS}'
		model = 'Antminer S9'
		generator = '${CONFIG_GENERATOR}'
		timestamp = $(date +%s)
	END

	json_init
	json_load "$(cat $CGMINER_CONF)"

	local multi_version
	local frequency
	local voltage

	if json_get_type Type "multi-version" && [ "$Type" == string ]; then
		json_get_var multi_version "multi-version"
	fi
	if json_get_type Type "bitmain-freq" && [ "$Type" == string ]; then
		json_get_var frequency "bitmain-freq"
	fi
	if json_get_type Type "bitmain-voltage" && [ "$Type" == string ]; then
		json_get_var voltage "bitmain-voltage"
	fi

	# Chain ID in original CGMiner config does not correspond to real ID and
	# it is also dynamic so per chain conversion is not possible
	frequency=$(get_min $frequency)
	voltage=$(get_max $voltage)

	if [ "$multi_version" != "4" -o -n "$frequency" -o -n "$voltage" ]; then
		cat >> "$BOSMINER_CONF_DST" <<-END

			[hash_chain_global]
		END
		[ "$multi_version" != "4" ] && echo "asic_boost = false" >> "$BOSMINER_CONF_DST"
		[ -n "$frequency" ] && echo "frequency = ${frequency}" >> "$BOSMINER_CONF_DST"
		[ -n "$voltage" ] && echo "voltage = ${voltage}" >> "$BOSMINER_CONF_DST"
	fi

	cat >> "$BOSMINER_CONF_DST" <<-END

		[[group]]
		name = 'Default'
	END

	if json_get_type Type "pools" && [ "$Type" == array ]; then
		local pool_url pool_user pool_pass

		json_select "pools"
		local idx="1"
		while json_get_type Type "$idx" && [ "$Type" == object ]; do
			json_select "$idx"
			json_get_var pool_url "url"
			json_get_var pool_user "user"
			json_get_var pool_pass "pass"
			json_select ..

			# Detect stratum server
			begins_with "stratum+tcp://" "$pool_url"
			local stratum=$?

			if [ $stratum -eq 0 ] || ! has_substr "://" "$pool_url"; then
				if [ $stratum -eq 0 ]; then
					cat >> "$BOSMINER_CONF_DST" <<-END

						[[group.pool]]
						url = '${pool_url}'
					END
				else
					cat >> "$BOSMINER_CONF_DST" <<-END

						[[group.pool]]
						# url = '${pool_url}'
						url = 'stratum+tcp://${pool_url}'
					END
				fi
				cat >> "$BOSMINER_CONF_DST" <<-END
					user = '${pool_user:-!non-existent-user!}'
				END
				[ -n "$pool_pass" ] && \
				cat >> "$BOSMINER_CONF_DST" <<-END
					password = '${pool_pass}'
				END
			else
				cat >> "$BOSMINER_CONF_DST" <<-END

					# Incompatible pool
					# [[group.pool]]
					# url = '${pool_url}'
					# user = '${pool_user}'
				END
				[ -n "$pool_pass" ] && \
				cat >> "$BOSMINER_CONF_DST" <<-END
					# password = '${pool_pass}'
				END
			fi

			$((idx++)) 2> /dev/null
		done
		json_select ..
	fi
	return 0
}

get_bosminer_toml_version() {
	awk -f - "$BOSMINER_CONF" <<-EOF
		/^\[format\]\$/ {
			f = "y"; next
		}
		/^\[.*\]\$/ {
			f = "n"; next
		}
		\$1 == "version" {
			print substr(\$3, 2, length(\$3)-2)
		}
	EOF
	return 0
}

migrate_bosminer_toml_to_open() {
	echo "Migrating BOSminer+ configuration file to open version..."

	local timestamp=$(date +%s)
	awk -f - "$BOSMINER_CONF" > "$BOSMINER_CONF_DST" <<-EOF
		function reset() {
				f = "n"; a = "n"
				g = "n"; t = "n"
		}

		BEGIN {
				reset()
		}
		/^\[format\]\$/ {
				reset(); f = "y"
				print; next
		}
		/^\[autotuning\]\$/ {
				reset(); a = "y"
				print "# " \$0; next
		}
		/^\[.*\]\$/ {
				if (f == "y") {
						if (g == "n") print "generator = '${CONFIG_GENERATOR}'"
						if (t == "n") print "timestamp = ${timestamp}"
						if (g == "n" || t == "n") print ""
				}
				reset()
		}
		f == "y" && \$1 == "version" {
				print "# " \$0; print "version = '1.0'"; next
		}
		f == "y" && \$1 == "generator" {
				g = "y"; print "generator = '${CONFIG_GENERATOR}'"; next
		}
		f == "y" && \$1 == "timestamp" {
				t = "y"; print "timestamp = ${timestamp}"; next
		}
		a == "y" {
				print "# " \$0; next
		}
		{print}
	EOF
	return 0
}

migrate_bosminer_toml_to_plus() {
	echo "Migrating BOSminer configuration file to plus version..."

	local miner_psu_power_limit=$(fw_printenv -n miner_psu_power_limit 2>/dev/null )
	awk -f - "$BOSMINER_CONF" > "$BOSMINER_CONF_DST" <<-EOF
		/^\[format\]\$/ {
			f = "y"
			print; next
		}
		/^\[.*\]\$/ {
			f = "n"
		}
		f == "y" && \$1 == "version" {
			print "# " \$0; print "version = '1.0+'"; next
		}
		{print}
		END {
			if ("${miner_psu_power_limit}") {
				print ""
				print "[autotuning]"
				print "enabled = true"
				print "psu_power_limit = ${miner_psu_power_limit}"
			}
		}
	EOF
	return 0
}

migrate_bosminer_toml() {
	# Do not migrate BOSminer config when BOSminer config is not present
	[ ! -f "$BOSMINER_CONF" ] && return 0

	local current_toml_version=$(get_bosminer_toml_version)
	# Exit when format version cannot be determined
	[ -z "$current_toml_version" ] && return 0

	local current_toml_version_plus=""
	case $current_toml_version in *+) current_toml_version_plus="+";; esac

	if [ -n "$UPGRADE_FW_VERSION_PLUS" ]; then
		# Do the migration when upgrading from open to plus version
		[ -z "$current_toml_version_plus" ] && migrate_bosminer_toml_to_plus
	else
		# Do the migration when downgrading from plus to open version
		[ -n "$current_toml_version_plus" ] && migrate_bosminer_toml_to_open
	fi

	return 0
}

replace_cgminer_conf() {
	local conf_dir_path=$(modify_configs)
	local conf_action="discard"

	rm "${conf_dir_path}${CGMINER_CONF}" 2>/dev/null && \
		conf_action="store"
	cp "${BOSMINER_CONF_DST}" "${conf_dir_path}/etc/" 2>/dev/null && \
		conf_action="store"

	finish_configs_modification $conf_action
	return 0
}

check_image() {
	check_fw_version $1 && {
		migrate_bosminer_toml
		migrate_cgminer_conf
	}
}

pre_upgrade() {
	local board_name=$1
	local tar_file=$2

	fix_recovery_partition
	fix_system_hostname
	replace_cgminer_conf
	compatible_write_spl $board_name $tar_file
	compatible_write_uenv $board_name $tar_file
	return
}
