UPGRADE_FW_MAJOR="%F"
UPGRADE_FW_VERSION="%f"
UPGRADE_FW_REQUIRE="%r"

UPGRADE_FW_VERSION_SUFFIX=${UPGRADE_FW_VERSION#*-*-*-*-*-}
UPGRADE_FW_VERSION_PLUS=""

case $UPGRADE_FW_VERSION_SUFFIX in *plus*) UPGRADE_FW_VERSION_PLUS="+";; esac

CONF_DIR_PATH="/tmp/sysupgrade_cfg"
CONF_TGZ_PATH="/tmp/sysupgrade.tgz"

current_fw_version() {
	if ! cat /etc/bos_version 2>/dev/null; then
		awk '/Package: /{p=$2} /Version: /{v=$2} /Status: /{if (p == "firmware" && $NF == "installed") print v}' \
			'/usr/lib/opkg/status'
	fi
}

current_fw_major() {
	cat /etc/bos_major 2>/dev/null || echo unknown
}

check_fw_version() {
	echo "Gathering current firmware information..."

	local board_name=$1
	local fw_major=$(current_fw_major)
	local fw_version=$(current_fw_version)

	echo "board  : $board_name"
	echo "version: $fw_version"
	echo "major  : $fw_major"

	echo "Checking compatibility..."

	if [ "$UPGRADE_FW_VERSION" ">" "$fw_version" ]; then
		# firmware upgrade
		if [ "$UPGRADE_FW_REQUIRE" ">" "$fw_version" ]; then
			echo "Firmware upgrade to '$UPGRADE_FW_VERSION' is not possible!"
			echo "Firmware version '$UPGRADE_FW_REQUIRE' is required before upgrading to this version."
			return 1
		fi
	elif [ "$UPGRADE_FW_VERSION" "<" "$fw_version" ]; then
		# firmware downgrade
		if [ "$UPGRADE_FW_MAJOR" != "$fw_major" ]; then
			echo "Firmware downgrade to '$UPGRADE_FW_VERSION' is not possible!"
			echo "Downgrade is only possible among firmwares with major version '$UPGRADE_FW_MAJOR'."
			echo "Do the factory reset and try to upgrade to this version."
			return 1
		fi
	fi

	return 0
}

modify_configs() {
	# extract configuration files from tarball
	mkdir -p "$CONF_DIR_PATH"
	tar -xzf "$CONF_TGZ_PATH" -C "$CONF_DIR_PATH"
	echo "$CONF_DIR_PATH"

	return 0
}

finish_configs_modification() {
	if [ "$1" == "store" ]; then
		tar -czf "$CONF_TGZ_PATH" -C "$CONF_DIR_PATH" $(ls -A "$CONF_DIR_PATH")
	fi

	# cleanup system
	rm -rf "$CONF_DIR_PATH"

	return 0
}

fix_system_hostname() {
	# affected firmwares do not have linked sed in sysupgrade rootfs
	[ -f "/bin/sed" ] && return 0

	/bin/busybox ln -s /bin/busybox /bin/sed

	local conf_dir_path=$(modify_configs)
	local conf_action="discard"

	sys_hostname=$(sed -n "/config system/,/config/s/.*option hostname '\(.*\)'/\1/p" \
		"$conf_dir_path/etc/config/system" 2>/dev/null)
	eth_hostname=$(sed -n "/config.*'lan'/,/config/s/.*option hostname '\(.*\)'/\1/p" \
		"$conf_dir_path/etc/config/network" 2>/dev/null)

	# detect obsolete miner system hostname
	if [ "$sys_hostname" = "MINER" -a -n "$eth_hostname" ]; then
		echo "Fixing obsolete miner system hostname..."
		# move ethernet specific hostname to global system hostname
		sed -i "/config system/,/config/s/\(.*option hostname\) .*/\1 '$eth_hostname'/" \
			"$conf_dir_path/etc/config/system" 2>/dev/null && \
		sed -i "/config.*'lan'/,/config/{/.*option hostname '/d}" \
			"$conf_dir_path/etc/config/network" 2>/dev/null && \
		conf_action="store"
	fi

	finish_configs_modification $conf_action

	# cleanup system
	rm /bin/sed

	return 0
}

# Fix old firmwares where original U-Boot wasn't stored in recovery partition
fix_recovery_partition() {
	# affected firmwares do not have linked gzip in sysupgrade rootfs
	[ -f "/bin/gzip" ] && return 0

	/bin/busybox ln -s /bin/busybox /bin/gzip
	/bin/busybox ln -s /bin/busybox /usr/bin/head

	local UBOOT_MTD=/dev/mtd1
	local RECOVERY_MTD=/dev/mtd6
	local RECOVERY_MTD_NAME=recovery

	local UBOOT_RECOVERY_OFFSET=0x1520000
	# All previous U-Boots have the same size
	local UBOOT_SIZE=573700

	# Dump first bytes of original U-Boot from recovery partition
	recovery_magic=$(nanddump -s ${UBOOT_RECOVERY_OFFSET} -ql 4 ${RECOVERY_MTD} | hexdump -v -n 4 -e '1/1 "%02x"')

	# If U-Boot in recovery partition is not erased then no fix is needed
	[ "$recovery_magic" == "ffffffff" ] || return 0

	echo "Fixing missing U-Boot in recovery partition..."

	# Use current U-Boot for creating backup in recovery partition
	nanddump -l ${UBOOT_SIZE} ${UBOOT_MTD} | head -c ${UBOOT_SIZE} | gzip | \
	mtd -np ${UBOOT_RECOVERY_OFFSET} write - ${RECOVERY_MTD_NAME}

	# cleanup system
	rm /usr/bin/head /bin/gzip

	return 0
}

# Support of U-Boot default environment upgrade for old firmwares
compatible_write_uenv() {
	# affected firmwares do not implement 'zynq_write_uenv' function
	type 'zynq_write_uenv' >/dev/null 2>/dev/null && return 0

	local board_name=$1
	local tar_file=$2

	local file_path=sysupgrade-$board_name/uenv
	local uenv_length=`(tar xf ${tar_file} $file_path -O | wc -c) 2>/dev/null`

	[ "$uenv_length" != 0 ] && {
		echo "Upgrading U-Boot default environment..."
		tar xf ${tar_file} $file_path -O | fw_setenv --script -
		fw_printenv
	}
}

# Support of SPL upgrade for old firmwares
compatible_write_spl() {
	# affected firmwares do not implement 'zynq_write_spl' function
	type 'zynq_write_spl' >/dev/null 2>/dev/null && return 0

	local board_name=$1
	local tar_file=$2

	local spl_length=`(tar xf ${tar_file} sysupgrade-$board_name/spl -O | wc -c) 2> /dev/null`

	[ "$spl_length" != 0 ] && {
		echo "Upgrading SPL..."
		mtd erase boot
		tar xf ${tar_file} sysupgrade-$board_name/spl -O | mtd write - boot
	}
}

